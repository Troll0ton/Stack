//! @file stack.h

#ifndef   STACK_H
#define   STACK_H

//-----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <locale.h>
#include <limits.h>

//-----------------------------------------------------------------------------

#define canary_1 0xBADDED
#define canary_2 0xDEDBAD

//-----------------------------------------------------------------------------

#define NUM_OF_MIS 9

//-----------------------------------------------------------------------------

#define ERROR_FIELD 30867456 //111010111||0000000000000000

//-----------------------------------------------------------------------------

#define stack_ctor(X, Y) stack_ctor_ext (X, Y, #X, __FILE__,  __LINE__)
#define stack_dump()     stack_dump_ext (X,        __FILE__,  __LINE__)

//-----------------------------------------------------------------------------

#define stk_increase 1
#define stk_decrease 0

//-----------------------------------------------------------------------------

struct Stack
{
    unsigned int   canary_open;

    const char    *name_stk;
    const char    *file_stk;
    int            line_stk;
    double        *buffer_stk;

    int            capacity_stk;
    int            size_stk;

    long long int  error_codes;

    char          *cur_status;
    unsigned int   hash_code;

    unsigned int   canary_close;
};

//-----------------------------------------------------------------------------

struct Error_info
{
    unsigned error_code;
    char *error_output;
};

//-----------------------------------------------------------------------------

const  Error_info error_arr[]
{
    {(1 << 0),  "|||ATTENTION||| the integrity of error codes violated!           \n\n"},
    {(1 << 1),  "ERROR - the integrity of first canary is broken                    \n"},
    {(1 << 2),  "ERROR - the integrity of second canary is broken                   \n"},
    {(1 << 3),  "ERROR - incorrect memory allocation for stack's data (NULL-pointer)\n"},
    {(1 << 4),  "ERROR - stack overflow                                             \n"},
    {(1 << 5),  "ERROR - incorrect capacity value (below zero)                      \n"},
    {(1 << 6),  "ERROR - incorrect capacity value (below zero)                      \n"},
    {(1 << 7),  "ERROR - incorrect memory allocation for stack (NULL-pointer)       \n"},
    {(1 << 8),  "ERROR - data integrity breach (invalid hash)                       \n"}
};

//-----------------------------------------------------------------------------

struct Verificator
{
    unsigned error_code;
    bool     statement;
};

//-----------------------------------------------------------------------------

struct Verificator verify_arr[]
{
    {(1 << 0),  ((stk->error_codes & ERROR_FIELD) != ERROR_FIELD)},
    {(1 << 1),  (stk->canary_open  != canary_1)},
    {(1 << 2),  (stk->canary_close != canary_2)},
    {(1 << 3),  (stk->buffer_stk == NULL)},
    {(1 << 4),  (stk->capacity_stk < stk->size_stk)},
    {(1 << 5),  (stk->capacity_stk < 0)},
    {(1 << 6),  (stk->size_stk < 0)},
    {(1 << 7),  (stk == NULL)},
    {(1 << 8),  (stk->hash_code != new_hash)},
}

//-----------------------------------------------------------------------------

void    stack_ctor_ext   (struct Stack **stk, int capacity_ctor, const char* name, const char* filename, int line);
void    stack_dtor       (struct Stack *stk);
double  stack_pop        (struct Stack *stk);
void    stack_push       (struct Stack *stk, double elem);
void    stack_resize     (struct Stack *stk, int opt_resize);
void    stack_dump_ext   (struct Stack *stk);
void    verificate_stack (struct Stack *stk, unsigned int new_hash);
void    handle_errors    (struct Stack *stk);
void    debug_stack      (struct Stack *stk);
unsigned int  calculate_hash   (struct Stack *stk);

//-----------------------------------------------------------------------------

#endif //STACK_H
